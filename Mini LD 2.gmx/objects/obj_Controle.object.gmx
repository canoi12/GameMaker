<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Variáveis globais
ini_open("SaveData.sav")
global.energia = ini_read_real("Upgrades","Energia",1000);
global.velBala = 10;
global.distBala = ini_read_real("Upgrades","Distancia da Bala",1);
global.qtdBala = ini_read_real("Upgrades","Timing da Bala",6);
global.pontos = ini_read_real("Pontos","pontos",0);
ini_close();

colBarras = make_colour_rgb(16,214,181); // Cor das barras

global.piloto = 0; // Piloto atual

global.upgrade = true; // Controle da tela de Updgrde
global.progresso = 0; // Barra de progresso
global.km = 0; // Distancia atual
global.dificuldade = 0; // Dificuldade atual
global.combo = 0; // Combo
global.barraCombo = 100; // Barra de combo
global.pause = false; // Variável que controla a pausa do jogo
global.desafios = false; // Variável que para a aparição das naves inimigas, quando o jogador chegar aos pontos de MiniBosses
global.desafioAtual = 1; // Variável que controla qual o desafio que será exibido

// Pixel Perfect Camera
script_execute(scr_InitGame);
view_wport[0] = global.gameWidth;
view_hport[0] = global.gameHeight;
view_wview[0] = global.gameWidth;
view_hview[0] = global.gameHeight;

display_set_gui_size(global.gameWidth*global.zoom,global.gameHeight*global.zoom);

// Variáveis para o shader
i = 0;
time = shader_get_uniform(shd_ascii,"u_time");
mouse = shader_get_uniform(shd_ascii,"u_mouse");
resolution = shader_get_uniform(shd_ascii,"u_resolution");


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(window_get_height() != global.gameHeight*global.zoom &amp;&amp;
    window_get_width() != global.gameWidth*global.zoom &amp;&amp;
    !window_get_fullscreen()) {
    
    window_set_size(global.gameWidth*global.zoom,global.gameHeight*global.zoom);
    //display_set_gui_maximise(global.gameHeight*global.zoom,global.gameWidth*global.zoom);
    surface_resize(application_surface,global.gameWidth,global.gameHeight);
    display_reset(0,false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*i += 0.01;
shader_set(shd_ascii);
draw_surface(application_surface,0,0);
shader_set_uniform_f(time,i);
shader_set_uniform_f(resolution,global.gameWidth,global.gameHeight);
shader_set_uniform_f(mouse,mouse_x,mouse_y);
shader_reset();*/

// Escreve os Kilometros na tela
draw_set_font(font0);
if room != Menu then draw_text_transformed_colour(display_get_gui_width()/2-20,30,string(ceil(global.km))+"Km",2,2,0,c_white,c_white,c_white,c_white,1);

// Desenha o combo atual e a barra de combo na tela
if(global.combo &gt; 0){
    draw_sprite(spr_barra_combo,0,display_get_gui_width()-120,5);
    draw_text_transformed(display_get_gui_width()-120,10,global.combo,2,2,0);
    draw_primitive_begin(pr_trianglefan);
        draw_vertex_colour(display_get_gui_width()-23-(global.barraCombo*0.87),53,colBarras,1);
        draw_vertex_colour(display_get_gui_width()-20-(global.barraCombo*0.87),44,colBarras,1);
        draw_vertex_colour(display_get_gui_width()-20,44,colBarras,1);
        draw_vertex_colour(display_get_gui_width()-23,53,colBarras,1);
    draw_primitive_end();
} 

// Desenha o progresso atual do jogador na tela
if(room == Jogo){
    draw_sprite(spr_barra_de_progresso,0,display_get_gui_width()/2,10);
    draw_sprite(spr_indicador_progresso,0,235+global.progresso,17);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="70">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.desafios){
    global.desafios = false;
    global.desafioAtual += 1;
    global.progresso += 0.1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>ini_open("SaveData.sav");
ini_write_real("Pontos","pontos",global.pontos);
ini_close();
game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
