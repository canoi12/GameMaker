<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_nave_inicio</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Variáveis
speed = 20 * (room == Canhao);
direction = 0;
vspd = 2;
timer = 0;
qtdBalas = 0;
image_speed = room != Jogo; // Muda o image_speed da nave dependendo da sala onde ele tá
i = 0; // Teste para a função Seno
j = 0; // Teste para a função Coseno
if(room == Jogo) then sprite_index = asset_get_index("spr_nave_player_"+string(global.piloto));
segcor = make_colour_rgb(255,153,151); // Cor usada para criar o laser inicial
jogar = false + (room == Jogo); // Define quando o jogador poderá começar a controlar a nave
energia = global.energia; // Energia da nave
caindo = false; /* Variável de controle, quando a energia da nave chegar a 0, a 
variável será ativada e a nave começará a cair*/
colisao = false; /* Variável de controle, evita que quando o personagem colidir
 com outra nave, sua energia seja consumida a todo o momento */
colidiu = false;

// Particulas
ps = part_system_create();
part_system_depth(ps,60);

ps2 = part_system_create();
part_system_depth(ps2,depth-1);

// Particulas das turbinas
pt = part_type_create();
part_type_shape(pt,pt_shape_circle);
part_type_orientation(pt,15,40,0,0,0);
part_type_size(pt,0.05,0.2,0,0);
part_type_colour_mix(pt,c_purple,c_white)
part_type_speed(pt,2,2.5,0.1,0);
part_type_direction(pt,180,180,0,4);
part_type_life(pt,10,10);

// Particulas da fumaça
pt2 = part_type_create();
part_type_shape(pt2,pt_shape_disk);
part_type_orientation(pt2,15,40,0,0,0);
part_type_size(pt2,0.05,0.2,0,0);
part_type_colour_mix(pt2,c_white,c_gray)
part_type_speed(pt2,3,3.5,0.2,0);
part_type_direction(pt2,45,115,0,4);
part_type_life(pt2,10,10);

pemitter = part_emitter_create(ps);
part_emitter_region(ps,pemitter,x-25,x-25,y+3,y+3,ps_shape_ellipse,ps_distr_linear);
part_emitter_stream(ps,pemitter,pt,2);

pexplo = part_emitter_create(ps2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>colisao = false;
image_alpha = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>timer -= 1;
// Se o personagem passar sair da tela, o jogo reinicia
// e destroi todas as partículas de explosão visíveis
if(y &gt; room_height){
    global.upgrade = true;
    if instance_exists(obj_Inimigo) then part_emitter_destroy_all(obj_Inimigo.ps);
    if !instance_exists(obj_scoreScreen) then instance_create(0,0,obj_scoreScreen);
}
// Cria o efeito de fade
if(x &gt; 720 and !instance_exists(obj_fade) and !jogar){
    instance_create(0,0,obj_fade);
}
// Se o x da nave passar de 1440, o jogo irá iniciar
if(x &gt; 1440 and room != Jogo and obj_fade.ativar == true){
    jogar = true;
    room_goto(Jogo);
    speed = 0;
}
// Atualiza constantemente o x e y das particulas para simularem o fogo da nave
if(!caindo){
    part_emitter_region(ps,pemitter,x-25,x-25,y+3,y+3,ps_shape_ellipse,ps_distr_linear);
    part_emitter_stream(ps,pemitter,pt,2);
} else {
    part_emitter_destroy(ps,pemitter);
    part_emitter_region(ps2,pexplo,x-25,x+25,y,y+6,ps_shape_ellipse,ps_distr_gaussian);
    part_emitter_stream(ps2,pexplo,pt2,2);
}

/** Começa o jogo **/
//Controles de view's e dos limites da nave na tela
if(jogar){
    view_xview[0] = 0;
    view_yview[0] = 0;
    x = min(max(50,x),room_width);
    if(!caindo){
        y = min(max(100,y),room_height-50);
    }
}
// Movimento da nave a menos que ela esteja caindo
if(!caindo and jogar){
    if(keyboard_check(vk_down)){
        y+= 8;
        image_index = 2;
    }
    else if(keyboard_check(vk_up)){
        y -= 8;
        image_index = 0;
    }
    else {
        if(jogar){
            image_index = 1;
        }
    }
}
if(keyboard_check(vk_right)){
    if(!caindo){
        x += 8;
    }
}
else if(keyboard_check(vk_left)){
    if(!caindo){
        x -= 8;
    }
}
// Faz a nave atirar
if(keyboard_check(ord('X')) &amp;&amp; timer &lt; 0 &amp;&amp; room == Jogo &amp;&amp; !caindo){
    if global.combo &lt; 20 {
        bala = instance_create(x+16,y+8,obj_bala);
        bala.direction = 0;
        timer = global.qtdBala;
    } else {
        bala = instance_create(x+16,y+8,obj_bala);
        bala.direction = 5;
        bala = instance_create(x+16,y+8,obj_bala);
        bala.direction = -5;
        timer = global.qtdBala;
    }
}
// Quando a energia chegar a 0, muda o angulo da nave, e faz ela começar a cair
if(energia &lt;= 0){
    caindo = true;
    if(image_angle &gt; -45){
        image_angle -= 5;
    }
}
if(caindo){
    gravity = 0.7;
} else {
    gravity = 0;
}
// Decrementa 1 de energia a cada frame
energia -= 1;

if(colisao){
    image_alpha = !image_alpha;
}

// Sistema de Distância e Dificuldade
global.km = global.progresso/2;
if global.km &gt; 30 then global.dificuldade = 1;

// Sistema de Combo
if(global.combo &gt; 0){
    global.barraCombo -= 1;
}
if(global.barraCombo &lt; 0){
    global.barraCombo = 0;
    global.combo = 0;
}
if(global.barraCombo &gt; 100){
    global.barraCombo = 100;
}
//room == Jogo  and
if(global.progresso == (60*global.desafioAtual) and room == Jogo and 
global.progresso &lt; 260) {
    global.desafios = true;
}
if(!global.desafios){
    global.progresso += 0.05;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Bullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!colisao){
    energia -= (global.energia/30)*10;
    colisao = true;
    alarm[0] = room_speed;
    colidiu = true;
}
global.combo = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Inimigo">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!colisao){
    energia -= (global.energia/30)*10;
    colisao = true;
    alarm[0] = room_speed;
    colidiu = true;
}
global.combo = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>part_emitter_destroy_all(ps);
part_emitter_destroy_all(ps2);
part_type_destroy(pt);
part_type_destroy(pt2);
part_system_destroy(ps);
part_system_destroy(ps2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(energia &gt; 0 and room == Jogo){
    //draw_rectangle_colour(5,3,5+105,12,c_fuchsia,c_fuchsia,c_fuchsia,c_fuchsia,false);
    draw_sprite(spr_hud,0,0,0);
    //draw_rectangle_colour(10,5,10+((energia/global.energia)*100),10,c_white,c_white,c_white,c_white,false);
}
if(!jogar){
    draw_circle_colour(obj_canhao.x-120,obj_canhao.y-52,16+image_index,segcor,segcor,false);
    draw_circle_colour(obj_canhao.x-120,obj_canhao.y-52,8+image_index,c_white,c_white,false);
    draw_rectangle_colour(obj_canhao.x-111,obj_canhao.y-59,x,y+8,segcor,segcor,segcor,segcor,false);
    draw_rectangle_colour(obj_canhao.x-111,obj_canhao.y-54-image_index,x,y+1+image_index,c_white,c_white,c_white,c_white,false);
}
if(colidiu){
    shader_set(shd_branco);
    draw_self();
    shader_reset();
    colidiu = false;
} else {
    draw_self();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
