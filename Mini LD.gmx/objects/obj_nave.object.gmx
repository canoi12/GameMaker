<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    if(room == Canhao)
    {
        state = scr_ship_launch_state   
    }
    else
    {
        state = scr_ship_move_state 
    }
    
    // Variáveis
    speed = 20 * (room == Canhao);
    direction = 0;
    vspd = 2;
    timer = 0;
    qtdBalas = global.qtdBala;
    pontosExtras = global.pontos;
    global.nivelNave = 0;
    global.nivelCombo = 0;
    //sprite_index = asset_get_index("spr_nave_inicio_"+string(global.piloto));
    i = 0; // Teste para a função Seno
    j = 0; // Teste para a função Coseno
    //if(room == Jogo) then sprite_index = asset_get_index("spr_nave_player_"+string(global.piloto));
    segcor = make_colour_rgb(255,153,151); // Cor usada para criar o laser inicial
    jogar = (room == Jogo); // Define quando o jogador poderá começar a controlar a nave
    image_speed = room != Jogo; // Muda o image_speed da nave dependendo da sala onde ele tá
    energia = global.energia; // Energia da nave
    caindo = false; /* Variável de controle, quando a energia da nave chegar a 0, a
variável será ativada e a nave começará a cair*/
    colisao = false; /* Variável de controle, evita que quando o personagem colidir
 com outra nave, sua energia seja consumida a todo o momento */
    colidiu = false; // Teste para ativar o shader branco quando o personagem levar dano

    // Particulas
    scr_partTurbina();

    ps2 = part_system_create();
    part_system_depth(ps2,depth-1);

    // Particulas da fumaça
    pt2 = part_type_create();
    part_type_shape(pt2,pt_shape_disk);
    part_type_orientation(pt2,15,40,0,0,0);
    part_type_size(pt2,0.05,0.2,0,0);
    part_type_colour_mix(pt2,c_white,c_gray)
    part_type_speed(pt2,3,3.5,0.2,0);
    part_type_direction(pt2,45,115,0,4);
    part_type_life(pt2,10,10);

    pexplo = part_emitter_create(ps2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    part_system_destroy(ps);
    part_system_destroy(ps2);
    part_system_destroy(pscombo);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    colisao = false;
    image_alpha = 1;
    
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>script_execute(state)

/*timer -= 1;

// Se o personagem passar sair da tela, o jogo reinicia
// e destroi todas as partículas de explosão visíveis
if(y &gt; room_height){
    global.upgrade = true;
    if instance_exists(obj_Inimigo) then part_emitter_destroy_all(obj_Inimigo.ps);
    if !instance_exists(obj_scoreScreen) then instance_create(0,-400,obj_scoreScreen);
}
// Cria o efeito de fade
if(x &gt; 720 and !instance_exists(obj_fade) and !jogar){
    instance_create(0,0,obj_fade);
}
// Se o x da nave passar de 1440, o jogo irá iniciar
if(x &gt; 1440 and room != Jogo and obj_fade.ativar == true){
    jogar = true;
    room_goto(Jogo);
    speed = 0;
}
// Atualiza constantemente o x e y das particulas para simularem o fogo da nave
if(!caindo){
    part_emitter_region(ps,pemitter,x-25,x-25,y+3,y+3,ps_shape_ellipse,ps_distr_linear);
    part_emitter_stream(ps,pemitter,pt,2);
} else {
    part_emitter_destroy(ps,pemitter);
    part_emitter_region(ps2,pexplo,x-25,x+25,y,y+6,ps_shape_ellipse,ps_distr_gaussian);
    part_emitter_stream(ps2,pexplo,pt2,2);
}

/** Começa o jogo **/
// Movimento da nave a menos que ela esteja caindo
/*if(!caindo and room == Jogo){
    if(keyboard_check(vk_down)){
        y+= vspd;
        image_index = 2;
    }
    else if(keyboard_check(vk_up)){
        y -= vspd;
        image_index = 0;
    }
    else {
        if(jogar){
            image_index = 1;
        }
    }
    if(keyboard_check(vk_right)){
            x += vspd;
    }
    else if(keyboard_check(vk_left)){
            x -= vspd;
    }
    if(os_type == os_android){
        if(device_mouse_check_button(0, mb_left)){
            var yy = device_mouse_y(0);
            if(yy &lt; 100){
                keyboard_key_press(vk_up);
            }
            else if(yy &gt; 300){
                keyboard_key_press(vk_down);
            }
            else
            {
                keyboard_key_press(ord("X")); 
            }
        }
        else{
            keyboard_key_release(vk_up);
            keyboard_key_release(vk_down);
            keyboard_key_release(ord("X"));
        }
        if(device_mouse_check_button(0, mb_left)){
            var xx = device_mouse_x(0);
            if(xx &lt; 160){
                keyboard_key_press(vk_left);
            }
            else if(xx &gt; 560){
                keyboard_key_press(vk_right);
            }
        }
        else{
            keyboard_key_release(vk_left);
            keyboard_key_release(vk_right);
        }
    }
}

//Controles de view's e dos limites da nave na tela
if(jogar){
    view_xview[0] = 0;
    view_yview[0] = 0;
    x = min(max(50,x),room_width);
    if(!caindo){
        y = min(max(100,y),room_height-50);
    }
}
// Quando a energia chegar a 0, muda o angulo da nave, e faz ela começar a cair
if(energia &lt;= 0){
    if(!caindo){
        global.pontos = pontosExtras;
    }
    caindo = true;
    energia = 0;
    if(image_angle &gt; -45){
        image_angle -= 5;
    }
}
if(caindo){
    gravity = 0.7;
} else {
    gravity = 0;
}

if(energia &gt; global.energia){
    energia = global.energia;
}
// Decrementa 1 de energia a cada frame
energia -= 1;

if(colisao){
    image_alpha = !image_alpha;
}

// Sistema de Distância e Dificuldade
if(!caindo){
    global.km = global.progresso/2;
    pontosExtras = global.pontos + ceil(global.km*100); 
    pontosExtras += 10*global.combo;
    //if global.km &gt; 30 then global.dificuldade = 1;
}

// Sistema de Combo
if(global.combo &gt; 0){
    global.barraCombo -= 1;
}
if(global.barraCombo &lt; 0){
    global.barraCombo = 0;
    global.combo = 0;
}
if(global.barraCombo &gt; 100){
    global.barraCombo = 100;
}
if (global.combo &gt; 0 and global.combo &gt;= (global.nivelCombo+1)*20
    and !instance_exists(obj_comboUp)) {
    global.nivelCombo += 1;
    instance_create(x,y,obj_comboUp);
}
//room == Jogo  and
if(floor(global.progresso) &gt;= (60*global.desafioAtual) and room == Jogo and
   global.progresso &lt; 260) {
    global.desafios = true;
}
if(!global.desafios and room == Jogo){
    global.progresso += global.velPlayer/20;
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Energia">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    energia += global.itemEnergia;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_explosion">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    if(other.dano){
        if(!colisao){
            energia -= (global.energia/30)*10;
            colisao = true;
            alarm[0] = room_speed;
            colidiu = true;
        }
        global.combo = 0;
        global.nivelCombo = 0;
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Bullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    if(jogar){
        if(!colisao){
            energia -= (global.energia/30)*10;
            colisao = true;
            alarm[0] = room_speed;
            colidiu = true;
        }
        global.combo = 0
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Inimigo">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    if(jogar){
        if(!colisao){
            energia -= (global.energia/30)*10;
            colisao = true;
            alarm[0] = room_speed;
            colidiu = true;
        }
        global.combo = 0;
        global.nivelCombo = 0;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    part_emitter_destroy_all(ps);
    part_emitter_destroy_all(ps2);
    part_type_destroy(pt);
    part_type_destroy(pt2);
    part_system_destroy(ps);
    part_system_destroy(ps2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>    /*draw_set_alpha(0.2);
if(y &lt; 150){
    draw_ellipse_colour(x-25,300,x+25,320,c_black,c_black,false);
}
else if(y &lt; 210){
    draw_ellipse_colour(x-25,150+y,x+25,170+y,c_black,c_black,false);
} else {
    draw_ellipse_colour(x-25,360,x+25,380,c_black,c_black,false);
}
draw_set_alpha(1);*/
    if(!jogar){
        if(room == Canhao){
            if(global.piloto == 0){
                draw_circle_colour(obj_canhao.x-120,obj_canhao.y-52,16+image_index,segcor,segcor,false);
                draw_circle_colour(obj_canhao.x-120,obj_canhao.y-52,8+image_index,c_white,c_white,false);
                draw_rectangle_colour(obj_canhao.x-112,obj_canhao.y-61,x,y+8,segcor,segcor,segcor,segcor,false);
                draw_rectangle_colour(obj_canhao.x-113,obj_canhao.y-55-image_index,x,y+2+image_index,c_white,c_white,c_white,c_white,false);
            }
            if(global.piloto == 1){
                draw_circle_colour(obj_canhao.x-118,obj_canhao.y-54,16+image_index,segcor,segcor,false);
                draw_circle_colour(obj_canhao.x-118,obj_canhao.y-54,8+image_index,c_white,c_white,false);
                draw_rectangle_colour(obj_canhao.x-111,obj_canhao.y-65,x,y+8,segcor,segcor,segcor,segcor,false);
                draw_rectangle_colour(obj_canhao.x-111,obj_canhao.y-58-image_index,x,y+1+image_index,c_white,c_white,c_white,c_white,false);
            }
            if(global.piloto == 2){
                draw_circle_colour(obj_canhao.x-118,obj_canhao.y-54,20+image_index,segcor,segcor,false);
                draw_circle_colour(obj_canhao.x-118,obj_canhao.y-54,12+image_index,c_white,c_white,false);
                draw_rectangle_colour(obj_canhao.x-106,obj_canhao.y-65,x,y+12,segcor,segcor,segcor,segcor,false);
                draw_rectangle_colour(obj_canhao.x-108,obj_canhao.y-58-image_index,x,y+5+image_index,c_white,c_white,c_white,c_white,false);
            }
        }
        else {
            if(global.piloto == 0){
                draw_rectangle_colour(-10,y-11,x,y+8,segcor,segcor,segcor,segcor,false);
                draw_rectangle_colour(-10,y-5-image_index,x,y+2+image_index,c_white,c_white,c_white,c_white,false);
            }
            if(global.piloto == 1){
                draw_rectangle_colour(-10,y-15,x,y+8,segcor,segcor,segcor,segcor,false);
                draw_rectangle_colour(-10,y-8-image_index,x,y+1+image_index,c_white,c_white,c_white,c_white,false);
            }
            if(global.piloto == 2){
                draw_rectangle_colour(-10,y-15,x,y+12,segcor,segcor,segcor,segcor,false);
                draw_rectangle_colour(-10,y-8-image_index,x,y+5+image_index,c_white,c_white,c_white,c_white,false);
            }
        }
    }
    if(colidiu){
        shader_set(shd_branco);
        draw_self();
        shader_reset();
        colidiu = false;
    } else {
        draw_self();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
